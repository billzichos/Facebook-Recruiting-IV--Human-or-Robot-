# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
comb$ClosedAsWon[comb$Status=="Won"] <- 1
# add only the fields from the snapshot dataset to the final dataset.
completeDataset <- select(comb, 1:21)
# str(completeDataset)
# str(completeDataset$ClosedAsWon)
# summary(completeDataset)
# summary(completeDataset$ClosedAsWon)
# overwrite the orginal snapshot file
write.csv(completeDataset,paste("~//Private-Github-Files//",snapshotFilename, sep = ""), row.names = FALSE)
plot(df.interval.mean)
base <- "https://maps.googleapis.com/maps/api/geocode/"
format<- "json?"
address <- "address=314+Wood+Hollow+Court,+Annapolis,+MD"
apiKey <- "&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0"
url <- paste(base, format, address, apiKey, sep = "")
url
url
library("jsonlite")
fromJSON(url)
names(fromJSON(url))
base <- "https://maps.googleapis.com/maps/api/geocode/"
format<- "json?"
address <- "address=314+Wood+Hollow+Court,+Annapolis,+MD"
apiKey <- "&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0"
url <- paste(base, format, address, apiKey, sep = "")
library("jsonlite")
rawJSON <- fromJSON(url)
rawJSON[1]
rawJSON[1][1]
rawJSON
rawJSON$results$geometry$location
LatLong <- rawJSON$results$geometry$location
address <- paste(address.streetNumber, address.streetName, address.streetType, address.city, address.stateAbbr, sep = "+")
base <- "https://maps.googleapis.com/maps/api/geocode/"
format<- "json?"
# format <- "xml?"
address.streetNumber <- "314"
address.streetName <- "Wood Hollow"
address.streetType <- "Court"
address.city <- "Annapolis"
address.stateAbbr <- "MD"
address <- paste(address.streetNumber, address.streetName, address.streetType, address.city, address.stateAbbr, sep = "+")
#address <- "address=314+Wood+Hollow+Court,+Annapolis,+MD"
apiKey <- "&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0"
url <- paste(base, format, address, apiKey, sep = "")
library("jsonlite")
rawJSON <- fromJSON(url)
latitude <- rawJSON$results$geometry$location$lat
longitude <- rawJSON$results$geometry$location$lng
address.street <- paste(address.street.number, address.street.name, address.street.type, sep = "+")
address.street.number <- "314"
address.street.name <- "Wood Hollow"
address.street.type <- "Court"
address.street <- paste(address.street.number, address.street.name, address.street.type, sep = "+")
help(grep)
address.street <- gsub(" ","+",paste(address.street.number, address.street.name, address.street.type, sep = "+"))
address <- paste(address.street,",",address.city, address.stateAbbr, sep = "")
address <- paste(address.street,",",address.city, address.stateAbbr, sep = "+")
base <- "https://maps.googleapis.com/maps/api/geocode/"
format<- "json?"
# format <- "xml?"
address.street.number <- "314"
address.street.name <- "Wood Hollow"
address.street.type <- "Court"
address.street <- gsub(" ","+",paste(address.street.number, address.street.name, address.street.type, sep = "+"))
address.city <- "Annapolis"
address.stateAbbr <- "MD"
address <- paste(address.street,",",address.city, address.stateAbbr, sep = "+")
address.street <- gsub(" ","+",paste(address.street.number, address.street.name, address.street.type, sep = " "))
address.street <- paste(address.street.number, address.street.name, address.street.type, sep = " ")
address.street <- paste(address.street.number, address.street.name, address.street.type, sep = " ")
address.city <- "Annapolis"
address.stateAbbr <- "MD"
address <- paste(address.street, address.city, address.stateAbbr, sep = ",")
address <- paste(address.street, address.city, address.stateAbbr, sep = ", ")
address <- gsub(" ", "+",paste(address.street, address.city, address.stateAbbr, sep = ", "))
apiKey <- "&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0"
url <- paste(base, format, address, apiKey, sep = "")
library("jsonlite")
rawJSON <- fromJSON(url)
latitude <- rawJSON$results$geometry$location$lat
longitude <- rawJSON$results$geometry$location$lng
rawJSON
url <- paste(base, format, "address=",address, apiKey, sep = "")
url
library("jsonlite")
rawJSON <- fromJSON(url)
latitude <- rawJSON$results$geometry$location$lat
longitude <- rawJSON$results$geometry$location$lng
base <- "https://maps.googleapis.com/maps/api/geocode/"
format<- "json?"
# format <- "xml?"
address.street.number <- "314"
address.street.name <- "Wood Hollow"
address.street.type <- "Court"
address.street <- paste(address.street.number, address.street.name, address.street.type, sep = " ")
address.city <- "Annapolis"
address.stateAbbr <- "MD"
address <- gsub(" ", "+",paste(address.street, address.city, address.stateAbbr, sep = ", "))
apiKey <- "AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0"
url <- paste(base, format, "address=", address, "&key=", apiKey, sep = "")
library("jsonlite")
rawJSON <- fromJSON(url)
latitude <- rawJSON$results$geometry$location$lat
longitude <- rawJSON$results$geometry$location$lng
url
url
df <- c("https://maps.googleapis.com/maps/api/geocode/json?address=314+Wood+Hollow+Court,+Annapolis,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0", "https://maps.googleapis.com/maps/api/geocode/json?address=419+Maple+Road,+Severna+Park,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0")
help(apply)
help(sapply)
sapply(df, fromJSON)
str(sapply(df, fromJSON))
df2 <- sapply(df, fromJSON)
df2
names(df2)
name(df2)
str(df2)
df[1]
df[2]
df[[1]]
df[3]
df[4]
df[5]
df[1]
df2[1]
df3<- df2[1]
str(df3)
fromJSON(url)$results
fromJSON(url)$results$geometry
fromJSON(url)$results$geometry$location
fromJSON(url)$results$geometry$location$lat
sapply(df, fromJSON(url)$results$geometry$location$lat)
getLat <- function(url) {
fromJSON(url)$results$geometry$location$lat
}
sapply(df, getLat)
df$Lat <- sapply(df, getLat)
df <- as.dataframe(c("https://maps.googleapis.com/maps/api/geocode/json?address=314+Wood+Hollow+Court,+Annapolis,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0", "https://maps.googleapis.com/maps/api/geocode/json?address=419+Maple+Road,+Severna+Park,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0"))
df <- as.dataframe(c("https://maps.googleapis.com/maps/api/geocode/json?address=314+Wood+Hollow+Court,+Annapolis,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0", "https://maps.googleapis.com/maps/api/geocode/json?address=419+Maple+Road,+Severna+Park,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0"))
df <- as.data.frame(c("https://maps.googleapis.com/maps/api/geocode/json?address=314+Wood+Hollow+Court,+Annapolis,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0", "https://maps.googleapis.com/maps/api/geocode/json?address=419+Maple+Road,+Severna+Park,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0"))
df$Lat <- sapply(df, getLat)
df <- c("https://maps.googleapis.com/maps/api/geocode/json?address=314+Wood+Hollow+Court,+Annapolis,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0", "https://maps.googleapis.com/maps/api/geocode/json?address=419+Maple+Road,+Severna+Park,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0")
df <- c("https://maps.googleapis.com/maps/api/geocode/json?address=314+Wood+Hollow+Court,+Annapolis,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0", "https://maps.googleapis.com/maps/api/geocode/json?address=419+Maple+Road,+Severna+Park,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0")
df <- c("https://maps.googleapis.com/maps/api/geocode/json?address=314+Wood+Hollow+Court,+Annapolis,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0", "https://maps.googleapis.com/maps/api/geocode/json?address=419+Maple+Road,+Severna+Park,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0")
df <- as.data.frame(df)
df$Lat <- sapply(df, getLat)
sapply(df, getLat)
df <- as.data.frame.AsIs(df)
df <- c("https://maps.googleapis.com/maps/api/geocode/json?address=314+Wood+Hollow+Court,+Annapolis,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0", "https://maps.googleapis.com/maps/api/geocode/json?address=419+Maple+Road,+Severna+Park,+MD&key=AIzaSyCSFWbr6V-tpFXh46UhCav3YK7qCmvaMr0")
df <- as.data.frame.AsIs(df)
sapply(df, getLat)
View(df)
sapply(df$df, getLat)
df$lat <- sapply(df$df, getLat)
getLng <- function(url) {
fromJSON(url)$results$geometry$location$lng
}
df$lng <- sapply(df$df, getLng)
#Update the periodic snapshot with Results if known
library(dplyr)
# specify the snapshot file to update with actual results
snapshotFilename <- "OpenDeals20150804.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv")
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
#Update the periodic snapshot with Results if known
library(dplyr)
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
snapshotFilename <- "OpenDeals20150804.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv", header = FALSE, col.names = c("Deal.Number", "Status"))
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
snapshotFilename <- "OpenDeals20150804.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv", header = FALSE, col.names = c("Deal.Number", "Status"), as.is = TRUE)
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
comb$ClosedAsWon[comb$Status=="Lost"]
comb$ClosedAsWon[comb$Status=="Won"]
#Update the periodic snapshot with Results if known
library(dplyr)
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
snapshotFilename <- "OpenDeals20150804.csv"
#Update the periodic snapshot with Results if known
library(dplyr)
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
snapshotFilename <- "OpenDeals20150804.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv", header = FALSE, col.names = c("Deal.Number", "Status"), as.is = TRUE)
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
comb$ClosedAsWon[comb$Status=="Won"] <- 1
# add only the fields from the snapshot dataset to the final dataset.
completeDataset <- select(comb, 1:21)
# str(completeDataset)
# str(completeDataset$ClosedAsWon)
# summary(completeDataset)
# summary(completeDataset$ClosedAsWon)
# overwrite the orginal snapshot file
write.csv(completeDataset,paste("~//Private-Github-Files//",snapshotFilename, sep = ""), row.names = FALSE)
#Update the periodic snapshot with Results if known
library(dplyr)
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
snapshotFilename <- "OpenDeals20150508.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv", header = FALSE, col.names = c("Deal.Number", "Status"), as.is = TRUE)
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
comb$ClosedAsWon[comb$Status=="Won"] <- 1
# add only the fields from the snapshot dataset to the final dataset.
completeDataset <- select(comb, 1:21)
# str(completeDataset)
# str(completeDataset$ClosedAsWon)
# summary(completeDataset)
# summary(completeDataset$ClosedAsWon)
# overwrite the orginal snapshot file
write.csv(completeDataset,paste("~//Private-Github-Files//",snapshotFilename, sep = ""), row.names = FALSE)
#Update the periodic snapshot with Results if known
library(dplyr)
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
snapshotFilename <- "OpenDeals20150601.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv", header = FALSE, col.names = c("Deal.Number", "Status"), as.is = TRUE)
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
comb$ClosedAsWon[comb$Status=="Won"] <- 1
# add only the fields from the snapshot dataset to the final dataset.
completeDataset <- select(comb, 1:21)
# str(completeDataset)
# str(completeDataset$ClosedAsWon)
# summary(completeDataset)
# summary(completeDataset$ClosedAsWon)
# overwrite the orginal snapshot file
write.csv(completeDataset,paste("~//Private-Github-Files//",snapshotFilename, sep = ""), row.names = FALSE)
#Update the periodic snapshot with Results if known
library(dplyr)
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
snapshotFilename <- "OpenDeals20151001.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv", header = FALSE, col.names = c("Deal.Number", "Status"), as.is = TRUE)
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
#Update the periodic snapshot with Results if known
library(dplyr)
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
snapshotFilename <- "OpenDeals20151001.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv", header = FALSE, col.names = c("Deal.Number", "Status"), as.is = TRUE)
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
comb$ClosedAsWon[comb$Status=="Won"] <- 1
# add only the fields from the snapshot dataset to the final dataset.
completeDataset <- select(comb, 1:21)
# str(completeDataset)
# str(completeDataset$ClosedAsWon)
# summary(completeDataset)
# summary(completeDataset$ClosedAsWon)
# overwrite the orginal snapshot file
write.csv(completeDataset,paste("~//Private-Github-Files//",snapshotFilename, sep = ""), row.names = FALSE)
#Update the periodic snapshot with Results if known
library(dplyr)
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
snapshotFilename <- "OpenDeals20150508.csv"
#snapshotFilename <- "OpenDeals20150601.csv"
#snapshotFilename <- "OpenDeals20150804.csv"
#snapshotFilename <- "OpenDeals20151001.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv", header = FALSE, col.names = c("Deal.Number", "Status"), as.is = TRUE)
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
comb$ClosedAsWon[comb$Status=="Won"] <- 1
# add only the fields from the snapshot dataset to the final dataset.
completeDataset <- select(comb, 1:21)
# str(completeDataset)
# str(completeDataset$ClosedAsWon)
# summary(completeDataset)
# summary(completeDataset$ClosedAsWon)
# overwrite the orginal snapshot file
write.csv(completeDataset,paste("~//Private-Github-Files//",snapshotFilename, sep = ""), row.names = FALSE)
#Update the periodic snapshot with Results if known
library(dplyr)
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
#snapshotFilename <- "OpenDeals20150508.csv"
snapshotFilename <- "OpenDeals20150601.csv"
#snapshotFilename <- "OpenDeals20150804.csv"
#snapshotFilename <- "OpenDeals20151001.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv", header = FALSE, col.names = c("Deal.Number", "Status"), as.is = TRUE)
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
comb$ClosedAsWon[comb$Status=="Won"] <- 1
# add only the fields from the snapshot dataset to the final dataset.
completeDataset <- select(comb, 1:21)
# str(completeDataset)
# str(completeDataset$ClosedAsWon)
# summary(completeDataset)
# summary(completeDataset$ClosedAsWon)
# overwrite the orginal snapshot file
write.csv(completeDataset,paste("~//Private-Github-Files//",snapshotFilename, sep = ""), row.names = FALSE)
#Update the periodic snapshot with Results if known
library(dplyr)
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
#snapshotFilename <- "OpenDeals20150508.csv"
#snapshotFilename <- "OpenDeals20150601.csv"
snapshotFilename <- "OpenDeals20150804.csv"
#snapshotFilename <- "OpenDeals20151001.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv", header = FALSE, col.names = c("Deal.Number", "Status"), as.is = TRUE)
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
comb$ClosedAsWon[comb$Status=="Won"] <- 1
# add only the fields from the snapshot dataset to the final dataset.
completeDataset <- select(comb, 1:21)
# str(completeDataset)
# str(completeDataset$ClosedAsWon)
# summary(completeDataset)
# summary(completeDataset$ClosedAsWon)
# overwrite the orginal snapshot file
write.csv(completeDataset,paste("~//Private-Github-Files//",snapshotFilename, sep = ""), row.names = FALSE)
#Update the periodic snapshot with Results if known
library(dplyr)
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
#snapshotFilename <- "OpenDeals20150508.csv"
#snapshotFilename <- "OpenDeals20150601.csv"
#snapshotFilename <- "OpenDeals20150804.csv"
snapshotFilename <- "OpenDeals20151001.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv", header = FALSE, col.names = c("Deal.Number", "Status"), as.is = TRUE)
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
# summary(comb)
# str(comb)
# update the closedsaswon field based on the value in the status field.
comb$ClosedAsWon[comb$Status=="Lost"] <- 0
comb$ClosedAsWon[comb$Status=="Won"] <- 1
# add only the fields from the snapshot dataset to the final dataset.
completeDataset <- select(comb, 1:21)
# str(completeDataset)
# str(completeDataset$ClosedAsWon)
# summary(completeDataset)
# summary(completeDataset$ClosedAsWon)
# overwrite the orginal snapshot file
write.csv(completeDataset,paste("~//Private-Github-Files//",snapshotFilename, sep = ""), row.names = FALSE)
comb
comb$ClosedAsWon[comb$Status=="Lost"]
comb$ClosedAsWon[comb$Status=="Won"]
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
comb$Status
#Update the periodic snapshot with Results if known
library(dplyr)
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
#snapshotFilename <- "OpenDeals20150508.csv"
#snapshotFilename <- "OpenDeals20150601.csv"
#snapshotFilename <- "OpenDeals20150804.csv"
snapshotFilename <- "OpenDeals20151001.csv"
#Update the periodic snapshot with Results if known
library(dplyr)
#setwd("~/Private-Github-Files")
# specify the snapshot file to update with actual results
#snapshotFilename <- "OpenDeals20150508.csv"
#snapshotFilename <- "OpenDeals20150601.csv"
#snapshotFilename <- "OpenDeals20150804.csv"
snapshotFilename <- "OpenDeals20151001.csv"
# import the actual results
results <- read.csv("~//Private-Github-Files//results.csv", header = FALSE, col.names = c("Deal.Number", "Status"), as.is = TRUE)
# str(results)
# import the point-in-time snapshot
snapshot <- read.csv(paste("~//Private-Github-Files//", snapshotFilename, sep =""))
# str(snapshot)
# summary(snapshot)
# merge the snapshot and results files, creating a single dataset
comb <- merge(snapshot, results, by.x = 'Deal.Number', by.y = 'Deal.Number')
View(comb)
View(results)
str(results)
str(snapshot)
summary(snapshot)
setwd("~/GitHub/Facebook-Recruiting-IV--Human-or-Robot-")
wd <- "~/GitHub/Facebook-Recruiting-IV--Human-or-Robot-"
setwd(wd)
# The following files are provided
#   - train.csv.zip
#   - sampleSubmission.csv.zip
#   - test.csv.zip
#   - bids.csv.zip
source("~/GitHub/Get-Raw-Data/download.R")
downloadSingleKaggleZip("facebook-recruiting-iv-human-or-bot","train.csv.zip", "train.csv")
downloadSingleKaggleZip("facebook-recruiting-iv-human-or-bot","sampleSubmission.csv.zip", "sampleSubmission.csv")
downloadSingleKaggleZip("facebook-recruiting-iv-human-or-bot","test.csv.zip", "test.csv")
downloadSingleKaggleZip("facebook-recruiting-iv-human-or-bot","train.csv.zip", "train.csv")
downloadSingleKaggleZip("facebook-recruiting-iv-human-or-bot","sampleSubmission.csv.zip", "sampleSubmission.csv")
downloadKaggle("facebook-recruiting-iv-human-or-bot","sampleSubmission.csv")
downloadSingleKaggleZip("facebook-recruiting-iv-human-or-bot","test.csv.zip", "test.csv")
downloadSingleKaggleZip("facebook-recruiting-iv-human-or-bot","bids.csv.zip", "bids.csv")
